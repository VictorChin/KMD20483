

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "EFDemo\App.config"
//     Connection String Name: "AWContext"
//     Connection String:      "Server=tcp:kmddemo.database.windows.net,1433;Initial Catalog=kmddb;Persist Security Info=False;User ID=chinzilla;password=**zapped**;;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : SQL Azure
// Database Engine Edition: Azure

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace EFDemo
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<BuildVersion> BuildVersions { get; set; } // BuildVersion
        System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        System.Data.Entity.DbSet<SalesLT_Address> SalesLT_Addresses { get; set; } // Address
        System.Data.Entity.DbSet<SalesLT_Customer> SalesLT_Customers { get; set; } // Customer
        System.Data.Entity.DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress
        System.Data.Entity.DbSet<SalesLT_Product> SalesLT_Products { get; set; } // Product
        System.Data.Entity.DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory
        System.Data.Entity.DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; } // ProductDescription
        System.Data.Entity.DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; } // ProductModel
        System.Data.Entity.DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        System.Data.Entity.DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail
        System.Data.Entity.DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader
        System.Data.Entity.DbSet<SalesLT_VGetAllCategory> SalesLT_VGetAllCategories { get; set; } // vGetAllCategories
        System.Data.Entity.DbSet<SalesLT_VProductAndDescription> SalesLT_VProductAndDescriptions { get; set; } // vProductAndDescription
        System.Data.Entity.DbSet<SalesLT_VProductModelCatalogDescription> SalesLT_VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int UspLogError(out int? errorLogId);
        // UspLogErrorAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UspPrintError();
        // UspPrintErrorAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<BuildVersion> BuildVersions { get; set; } // BuildVersion
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public System.Data.Entity.DbSet<SalesLT_Address> SalesLT_Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<SalesLT_Customer> SalesLT_Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress
        public System.Data.Entity.DbSet<SalesLT_Product> SalesLT_Products { get; set; } // Product
        public System.Data.Entity.DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory
        public System.Data.Entity.DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; } // ProductDescription
        public System.Data.Entity.DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; } // ProductModel
        public System.Data.Entity.DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        public System.Data.Entity.DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail
        public System.Data.Entity.DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader
        public System.Data.Entity.DbSet<SalesLT_VGetAllCategory> SalesLT_VGetAllCategories { get; set; } // vGetAllCategories
        public System.Data.Entity.DbSet<SalesLT_VProductAndDescription> SalesLT_VProductAndDescriptions { get; set; } // vProductAndDescription
        public System.Data.Entity.DbSet<SalesLT_VProductModelCatalogDescription> SalesLT_VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription
        public System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=AWContext")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BuildVersionConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_AddressConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_CustomerConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_CustomerAddressConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductModelConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductModelProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_VGetAllCategoryConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_VProductAndDescriptionConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_VProductModelCatalogDescriptionConfiguration());
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_CustomerAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductModelProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_VGetAllCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_VProductAndDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_VProductModelCatalogDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int UspPrintError()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Database context factory

    public class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
    {
        public MyDbContext Create()
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<BuildVersion> BuildVersions { get; set; }
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; }
        public System.Data.Entity.DbSet<SalesLT_Address> SalesLT_Addresses { get; set; }
        public System.Data.Entity.DbSet<SalesLT_Customer> SalesLT_Customers { get; set; }
        public System.Data.Entity.DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; }
        public System.Data.Entity.DbSet<SalesLT_Product> SalesLT_Products { get; set; }
        public System.Data.Entity.DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; }
        public System.Data.Entity.DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; }
        public System.Data.Entity.DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; }
        public System.Data.Entity.DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; }
        public System.Data.Entity.DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; }
        public System.Data.Entity.DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<SalesLT_VGetAllCategory> SalesLT_VGetAllCategories { get; set; }
        public System.Data.Entity.DbSet<SalesLT_VProductAndDescription> SalesLT_VProductAndDescriptions { get; set; }
        public System.Data.Entity.DbSet<SalesLT_VProductModelCatalogDescription> SalesLT_VProductModelCatalogDescriptions { get; set; }
        public System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; }

        public FakeMyDbContext()
        {
            BuildVersions = new FakeDbSet<BuildVersion>("SystemInformationId");
            ErrorLogs = new FakeDbSet<ErrorLog>("ErrorLogId");
            SalesLT_Addresses = new FakeDbSet<SalesLT_Address>("AddressId");
            SalesLT_Customers = new FakeDbSet<SalesLT_Customer>("CustomerId");
            SalesLT_CustomerAddresses = new FakeDbSet<SalesLT_CustomerAddress>("CustomerId", "AddressId");
            SalesLT_Products = new FakeDbSet<SalesLT_Product>("ProductId");
            SalesLT_ProductCategories = new FakeDbSet<SalesLT_ProductCategory>("ProductCategoryId");
            SalesLT_ProductDescriptions = new FakeDbSet<SalesLT_ProductDescription>("ProductDescriptionId");
            SalesLT_ProductModels = new FakeDbSet<SalesLT_ProductModel>("ProductModelId");
            SalesLT_ProductModelProductDescriptions = new FakeDbSet<SalesLT_ProductModelProductDescription>("ProductModelId", "ProductDescriptionId", "Culture");
            SalesLT_SalesOrderDetails = new FakeDbSet<SalesLT_SalesOrderDetail>("SalesOrderId", "SalesOrderDetailId");
            SalesLT_SalesOrderHeaders = new FakeDbSet<SalesLT_SalesOrderHeader>("SalesOrderId");
            SalesLT_VGetAllCategories = new FakeDbSet<SalesLT_VGetAllCategory>("ParentProductCategoryName");
            SalesLT_VProductAndDescriptions = new FakeDbSet<SalesLT_VProductAndDescription>("ProductId", "Name", "ProductModel", "Culture", "Description");
            SalesLT_VProductModelCatalogDescriptions = new FakeDbSet<SalesLT_VProductModelCatalogDescription>("ProductModelId", "Name", "Rowguid", "ModifiedDate");
            sys_DatabaseFirewallRules = new FakeDbSet<sys_DatabaseFirewallRule>("Id", "Name", "StartIpAddress", "EndIpAddress", "CreateDate", "ModifyDate");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int UspLogError(out int? errorLogId)
        {
            errorLogId = default(int);

            return 0;
        }

        public int UspPrintError()
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // BuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class BuildVersion
    {
        public byte SystemInformationId { get; set; } // SystemInformationID (Primary key)
        public string DatabaseVersion { get; set; } // Database Version (length: 25)
        public System.DateTime VersionDate { get; set; } // VersionDate
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public BuildVersion()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class ErrorLog
    {
        public int ErrorLogId { get; set; } // ErrorLogID (Primary key)
        public System.DateTime ErrorTime { get; set; } // ErrorTime
        public string UserName { get; set; } // UserName (length: 128)
        public int ErrorNumber { get; set; } // ErrorNumber
        public int? ErrorSeverity { get; set; } // ErrorSeverity
        public int? ErrorState { get; set; } // ErrorState
        public string ErrorProcedure { get; set; } // ErrorProcedure (length: 126)
        public int? ErrorLine { get; set; } // ErrorLine
        public string ErrorMessage { get; set; } // ErrorMessage (length: 4000)

        public ErrorLog()
        {
            ErrorTime = System.DateTime.Now;
        }
    }

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_Address
    {
        public int AddressId { get; set; } // AddressID (Primary key)
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)
        public string City { get; set; } // City (length: 30)
        public string StateProvince { get; set; } // StateProvince (length: 50)
        public string CountryRegion { get; set; } // CountryRegion (length: 50)
        public string PostalCode { get; set; } // PostalCode (length: 15)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_CustomerAddresses where [CustomerAddress].[AddressID] point to this entity (FK_CustomerAddress_Address_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress.FK_CustomerAddress_Address_AddressID
        /// <summary>
        /// Child SalesLT_SalesOrderHeaders where [SalesOrderHeader].[BillToAddressID] point to this entity (FK_SalesOrderHeader_Address_BillTo_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_SalesOrderHeader> BillToAddress { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_BillTo_AddressID
        /// <summary>
        /// Child SalesLT_SalesOrderHeaders where [SalesOrderHeader].[ShipToAddressID] point to this entity (FK_SalesOrderHeader_Address_ShipTo_AddressID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_SalesOrderHeader> ShipToAddress { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_ShipTo_AddressID

        public SalesLT_Address()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_CustomerAddresses = new System.Collections.Generic.List<SalesLT_CustomerAddress>();
            BillToAddress = new System.Collections.Generic.List<SalesLT_SalesOrderHeader>();
            ShipToAddress = new System.Collections.Generic.List<SalesLT_SalesOrderHeader>();
        }
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_Customer
    {
        public int CustomerId { get; set; } // CustomerID (Primary key)
        public bool NameStyle { get; set; } // NameStyle
        public string Title { get; set; } // Title (length: 8)
        public string FirstName { get; set; } // FirstName (length: 50)
        public string MiddleName { get; set; } // MiddleName (length: 50)
        public string LastName { get; set; } // LastName (length: 50)
        public string Suffix { get; set; } // Suffix (length: 10)
        public string CompanyName { get; set; } // CompanyName (length: 128)
        public string SalesPerson { get; set; } // SalesPerson (length: 256)
        public string EmailAddress { get; set; } // EmailAddress (length: 50)
        public string Phone { get; set; } // Phone (length: 25)
        public string PasswordHash { get; set; } // PasswordHash (length: 128)
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_CustomerAddresses where [CustomerAddress].[CustomerID] point to this entity (FK_CustomerAddress_Customer_CustomerID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress.FK_CustomerAddress_Customer_CustomerID
        /// <summary>
        /// Child SalesLT_SalesOrderHeaders where [SalesOrderHeader].[CustomerID] point to this entity (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        public SalesLT_Customer()
        {
            NameStyle = false;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_CustomerAddresses = new System.Collections.Generic.List<SalesLT_CustomerAddress>();
            SalesLT_SalesOrderHeaders = new System.Collections.Generic.List<SalesLT_SalesOrderHeader>();
        }
    }

    // CustomerAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_CustomerAddress
    {
        public int CustomerId { get; set; } // CustomerID (Primary key)
        public int AddressId { get; set; } // AddressID (Primary key)
        public string AddressType { get; set; } // AddressType (length: 50)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_Address pointed by [CustomerAddress].([AddressId]) (FK_CustomerAddress_Address_AddressID)
        /// </summary>
        public virtual SalesLT_Address SalesLT_Address { get; set; } // FK_CustomerAddress_Address_AddressID

        /// <summary>
        /// Parent SalesLT_Customer pointed by [CustomerAddress].([CustomerId]) (FK_CustomerAddress_Customer_CustomerID)
        /// </summary>
        public virtual SalesLT_Customer SalesLT_Customer { get; set; } // FK_CustomerAddress_Customer_CustomerID

        public SalesLT_CustomerAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_Product
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string ProductNumber { get; set; } // ProductNumber (length: 25)
        public string Color { get; set; } // Color (length: 15)
        public decimal StandardCost { get; set; } // StandardCost
        public decimal ListPrice { get; set; } // ListPrice
        public string Size { get; set; } // Size (length: 5)
        public decimal? Weight { get; set; } // Weight
        public int? ProductCategoryId { get; set; } // ProductCategoryID
        public int? ProductModelId { get; set; } // ProductModelID
        public System.DateTime SellStartDate { get; set; } // SellStartDate
        public System.DateTime? SellEndDate { get; set; } // SellEndDate
        public System.DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate
        public byte[] ThumbNailPhoto { get; set; } // ThumbNailPhoto
        public string ThumbnailPhotoFileName { get; set; } // ThumbnailPhotoFileName (length: 50)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_SalesOrderDetails where [SalesOrderDetail].[ProductID] point to this entity (FK_SalesOrderDetail_Product_ProductID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_Product_ProductID

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_ProductCategory pointed by [Product].([ProductCategoryId]) (FK_Product_ProductCategory_ProductCategoryID)
        /// </summary>
        public virtual SalesLT_ProductCategory SalesLT_ProductCategory { get; set; } // FK_Product_ProductCategory_ProductCategoryID

        /// <summary>
        /// Parent SalesLT_ProductModel pointed by [Product].([ProductModelId]) (FK_Product_ProductModel_ProductModelID)
        /// </summary>
        public virtual SalesLT_ProductModel SalesLT_ProductModel { get; set; } // FK_Product_ProductModel_ProductModelID

        public SalesLT_Product()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_SalesOrderDetails = new System.Collections.Generic.List<SalesLT_SalesOrderDetail>();
        }
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductCategory
    {
        public int ProductCategoryId { get; set; } // ProductCategoryID (Primary key)
        public int? ParentProductCategoryId { get; set; } // ParentProductCategoryID
        public string Name { get; set; } // Name (length: 50)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_Products where [Product].[ProductCategoryID] point to this entity (FK_Product_ProductCategory_ProductCategoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_Product> SalesLT_Products { get; set; } // Product.FK_Product_ProductCategory_ProductCategoryID
        /// <summary>
        /// Child SalesLT_ProductCategories where [ProductCategory].[ParentProductCategoryID] point to this entity (FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory.FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_ProductCategory pointed by [ProductCategory].([ParentProductCategoryId]) (FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID)
        /// </summary>
        public virtual SalesLT_ProductCategory ParentProductCategory { get; set; } // FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID

        public SalesLT_ProductCategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_Products = new System.Collections.Generic.List<SalesLT_Product>();
            SalesLT_ProductCategories = new System.Collections.Generic.List<SalesLT_ProductCategory>();
        }
    }

    // ProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductDescription
    {
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)
        public string Description { get; set; } // Description (length: 400)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_ProductModelProductDescriptions where [ProductModelProductDescription].[ProductDescriptionID] point to this entity (FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription.FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID

        public SalesLT_ProductDescription()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_ProductModelProductDescriptions = new System.Collections.Generic.List<SalesLT_ProductModelProductDescription>();
        }
    }

    // ProductModel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductModel
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string CatalogDescription { get; set; } // CatalogDescription
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_Products where [Product].[ProductModelID] point to this entity (FK_Product_ProductModel_ProductModelID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_Product> SalesLT_Products { get; set; } // Product.FK_Product_ProductModel_ProductModelID
        /// <summary>
        /// Child SalesLT_ProductModelProductDescriptions where [ProductModelProductDescription].[ProductModelID] point to this entity (FK_ProductModelProductDescription_ProductModel_ProductModelID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription.FK_ProductModelProductDescription_ProductModel_ProductModelID

        public SalesLT_ProductModel()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_Products = new System.Collections.Generic.List<SalesLT_Product>();
            SalesLT_ProductModelProductDescriptions = new System.Collections.Generic.List<SalesLT_ProductModelProductDescription>();
        }
    }

    // ProductModelProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductModelProductDescription
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key)
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)
        public string Culture { get; set; } // Culture (Primary key) (length: 6)
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_ProductDescription pointed by [ProductModelProductDescription].([ProductDescriptionId]) (FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID)
        /// </summary>
        public virtual SalesLT_ProductDescription SalesLT_ProductDescription { get; set; } // FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID

        /// <summary>
        /// Parent SalesLT_ProductModel pointed by [ProductModelProductDescription].([ProductModelId]) (FK_ProductModelProductDescription_ProductModel_ProductModelID)
        /// </summary>
        public virtual SalesLT_ProductModel SalesLT_ProductModel { get; set; } // FK_ProductModelProductDescription_ProductModel_ProductModelID

        public SalesLT_ProductModelProductDescription()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_SalesOrderDetail
    {
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)
        public int SalesOrderDetailId { get; set; } // SalesOrderDetailID (Primary key)
        public short OrderQty { get; set; } // OrderQty
        public int ProductId { get; set; } // ProductID
        public decimal UnitPrice { get; set; } // UnitPrice
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount
        public decimal LineTotal { get; private set; } // LineTotal
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_Product pointed by [SalesOrderDetail].([ProductId]) (FK_SalesOrderDetail_Product_ProductID)
        /// </summary>
        public virtual SalesLT_Product SalesLT_Product { get; set; } // FK_SalesOrderDetail_Product_ProductID

        /// <summary>
        /// Parent SalesLT_SalesOrderHeader pointed by [SalesOrderDetail].([SalesOrderId]) (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual SalesLT_SalesOrderHeader SalesLT_SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID

        public SalesLT_SalesOrderDetail()
        {
            UnitPriceDiscount = 0.0m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_SalesOrderHeader
    {
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)
        public byte RevisionNumber { get; set; } // RevisionNumber
        public System.DateTime OrderDate { get; set; } // OrderDate
        public System.DateTime DueDate { get; set; } // DueDate
        public System.DateTime? ShipDate { get; set; } // ShipDate
        public byte Status { get; set; } // Status
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag
        public string SalesOrderNumber { get; private set; } // SalesOrderNumber (length: 25)
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber (length: 25)
        public string AccountNumber { get; set; } // AccountNumber (length: 15)
        public int CustomerId { get; set; } // CustomerID
        public int? ShipToAddressId { get; set; } // ShipToAddressID
        public int? BillToAddressId { get; set; } // BillToAddressID
        public string ShipMethod { get; set; } // ShipMethod (length: 50)
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode (length: 15)
        public decimal SubTotal { get; set; } // SubTotal
        public decimal TaxAmt { get; set; } // TaxAmt
        public decimal Freight { get; set; } // Freight
        public decimal TotalDue { get; private set; } // TotalDue
        public string Comment { get; set; } // Comment
        public System.Guid Rowguid { get; set; } // rowguid
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_SalesOrderDetails where [SalesOrderDetail].[SalesOrderID] point to this entity (FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID

        // Foreign keys

        /// <summary>
        /// Parent SalesLT_Address pointed by [SalesOrderHeader].([BillToAddressId]) (FK_SalesOrderHeader_Address_BillTo_AddressID)
        /// </summary>
        public virtual SalesLT_Address BillToAddress { get; set; } // FK_SalesOrderHeader_Address_BillTo_AddressID

        /// <summary>
        /// Parent SalesLT_Address pointed by [SalesOrderHeader].([ShipToAddressId]) (FK_SalesOrderHeader_Address_ShipTo_AddressID)
        /// </summary>
        public virtual SalesLT_Address ShipToAddress { get; set; } // FK_SalesOrderHeader_Address_ShipTo_AddressID

        /// <summary>
        /// Parent SalesLT_Customer pointed by [SalesOrderHeader].([CustomerId]) (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual SalesLT_Customer SalesLT_Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID

        public SalesLT_SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_SalesOrderDetails = new System.Collections.Generic.List<SalesLT_SalesOrderDetail>();
        }
    }

    // vGetAllCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_VGetAllCategory
    {
        public string ParentProductCategoryName { get; set; } // ParentProductCategoryName (Primary key) (length: 50)
        public string ProductCategoryName { get; set; } // ProductCategoryName (length: 50)
        public int? ProductCategoryId { get; set; } // ProductCategoryID
    }

    // vProductAndDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_VProductAndDescription
    {
        public int ProductId { get; set; } // ProductID (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public string ProductModel { get; set; } // ProductModel (Primary key) (length: 50)
        public string Culture { get; set; } // Culture (Primary key) (length: 6)
        public string Description { get; set; } // Description (Primary key) (length: 400)
    }

    // vProductModelCatalogDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_VProductModelCatalogDescription
    {
        public int ProductModelId { get; set; } // ProductModelID (Primary key)
        public string Name { get; set; } // Name (Primary key) (length: 50)
        public string Summary { get; set; } // Summary
        public string Manufacturer { get; set; } // Manufacturer
        public string Copyright { get; set; } // Copyright (length: 30)
        public string ProductUrl { get; set; } // ProductURL (length: 256)
        public string WarrantyPeriod { get; set; } // WarrantyPeriod (length: 256)
        public string WarrantyDescription { get; set; } // WarrantyDescription (length: 256)
        public string NoOfYears { get; set; } // NoOfYears (length: 256)
        public string MaintenanceDescription { get; set; } // MaintenanceDescription (length: 256)
        public string Wheel { get; set; } // Wheel (length: 256)
        public string Saddle { get; set; } // Saddle (length: 256)
        public string Pedal { get; set; } // Pedal (length: 256)
        public string BikeFrame { get; set; } // BikeFrame
        public string Crankset { get; set; } // Crankset (length: 256)
        public string PictureAngle { get; set; } // PictureAngle (length: 256)
        public string PictureSize { get; set; } // PictureSize (length: 256)
        public string ProductPhotoId { get; set; } // ProductPhotoID (length: 256)
        public string Material { get; set; } // Material (length: 256)
        public string Color { get; set; } // Color (length: 256)
        public string ProductLine { get; set; } // ProductLine (length: 256)
        public string Style { get; set; } // Style (length: 256)
        public string RiderExperience { get; set; } // RiderExperience (length: 1024)
        public System.Guid Rowguid { get; set; } // rowguid (Primary key)
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate (Primary key)
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class sys_DatabaseFirewallRule
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (Primary key) (length: 128)
        public string StartIpAddress { get; set; } // start_ip_address (Primary key) (length: 45)
        public string EndIpAddress { get; set; } // end_ip_address (Primary key) (length: 45)
        public System.DateTime CreateDate { get; set; } // create_date (Primary key)
        public System.DateTime ModifyDate { get; set; } // modify_date (Primary key)
    }

    #endregion

    #region POCO Configuration

    // BuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class BuildVersionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BuildVersion>
    {
        public BuildVersionConfiguration()
            : this("dbo")
        {
        }

        public BuildVersionConfiguration(string schema)
        {
            ToTable("BuildVersion", schema);
            HasKey(x => x.SystemInformationId);

            Property(x => x.SystemInformationId).HasColumnName(@"SystemInformationID").HasColumnType("tinyint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DatabaseVersion).HasColumnName(@"Database Version").HasColumnType("nvarchar").IsRequired().HasMaxLength(25);
            Property(x => x.VersionDate).HasColumnName(@"VersionDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class ErrorLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ErrorLog>
    {
        public ErrorLogConfiguration()
            : this("dbo")
        {
        }

        public ErrorLogConfiguration(string schema)
        {
            ToTable("ErrorLog", schema);
            HasKey(x => x.ErrorLogId);

            Property(x => x.ErrorLogId).HasColumnName(@"ErrorLogID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ErrorTime).HasColumnName(@"ErrorTime").HasColumnType("datetime").IsRequired();
            Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar").IsRequired().HasMaxLength(128);
            Property(x => x.ErrorNumber).HasColumnName(@"ErrorNumber").HasColumnType("int").IsRequired();
            Property(x => x.ErrorSeverity).HasColumnName(@"ErrorSeverity").HasColumnType("int").IsOptional();
            Property(x => x.ErrorState).HasColumnName(@"ErrorState").HasColumnType("int").IsOptional();
            Property(x => x.ErrorProcedure).HasColumnName(@"ErrorProcedure").HasColumnType("nvarchar").IsOptional().HasMaxLength(126);
            Property(x => x.ErrorLine).HasColumnName(@"ErrorLine").HasColumnType("int").IsOptional();
            Property(x => x.ErrorMessage).HasColumnName(@"ErrorMessage").HasColumnType("nvarchar").IsRequired().HasMaxLength(4000);
        }
    }

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_AddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_Address>
    {
        public SalesLT_AddressConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_AddressConfiguration(string schema)
        {
            ToTable("Address", schema);
            HasKey(x => x.AddressId);

            Property(x => x.AddressId).HasColumnName(@"AddressID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").HasColumnType("nvarchar").IsRequired().HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").HasColumnType("nvarchar").IsOptional().HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar").IsRequired().HasMaxLength(30);
            Property(x => x.StateProvince).HasColumnName(@"StateProvince").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CountryRegion).HasColumnName(@"CountryRegion").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(15);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_CustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_Customer>
    {
        public SalesLT_CustomerConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_CustomerConfiguration(string schema)
        {
            ToTable("Customer", schema);
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameStyle).HasColumnName(@"NameStyle").HasColumnType("bit").IsRequired();
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsOptional().HasMaxLength(128);
            Property(x => x.SalesPerson).HasColumnName(@"SalesPerson").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsOptional().HasMaxLength(25);
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(128);
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(10);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // CustomerAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_CustomerAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_CustomerAddress>
    {
        public SalesLT_CustomerAddressConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_CustomerAddressConfiguration(string schema)
        {
            ToTable("CustomerAddress", schema);
            HasKey(x => new { x.CustomerId, x.AddressId });

            Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName(@"AddressID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressType).HasColumnName(@"AddressType").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.SalesLT_Address).WithMany(b => b.SalesLT_CustomerAddresses).HasForeignKey(c => c.AddressId).WillCascadeOnDelete(false); // FK_CustomerAddress_Address_AddressID
            HasRequired(a => a.SalesLT_Customer).WithMany(b => b.SalesLT_CustomerAddresses).HasForeignKey(c => c.CustomerId).WillCascadeOnDelete(false); // FK_CustomerAddress_Customer_CustomerID
        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_Product>
    {
        public SalesLT_ProductConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_ProductConfiguration(string schema)
        {
            ToTable("Product", schema);
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(25);
            Property(x => x.Color).HasColumnName(@"Color").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
            Property(x => x.StandardCost).HasColumnName(@"StandardCost").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.ListPrice).HasColumnName(@"ListPrice").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Size).HasColumnName(@"Size").HasColumnType("nvarchar").IsOptional().HasMaxLength(5);
            Property(x => x.Weight).HasColumnName(@"Weight").HasColumnType("decimal").IsOptional().HasPrecision(8,2);
            Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("int").IsOptional();
            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").HasColumnType("int").IsOptional();
            Property(x => x.SellStartDate).HasColumnName(@"SellStartDate").HasColumnType("datetime").IsRequired();
            Property(x => x.SellEndDate).HasColumnName(@"SellEndDate").HasColumnType("datetime").IsOptional();
            Property(x => x.DiscontinuedDate).HasColumnName(@"DiscontinuedDate").HasColumnType("datetime").IsOptional();
            Property(x => x.ThumbNailPhoto).HasColumnName(@"ThumbNailPhoto").HasColumnType("varbinary(max)").IsOptional();
            Property(x => x.ThumbnailPhotoFileName).HasColumnName(@"ThumbnailPhotoFileName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.SalesLT_ProductCategory).WithMany(b => b.SalesLT_Products).HasForeignKey(c => c.ProductCategoryId).WillCascadeOnDelete(false); // FK_Product_ProductCategory_ProductCategoryID
            HasOptional(a => a.SalesLT_ProductModel).WithMany(b => b.SalesLT_Products).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_Product_ProductModel_ProductModelID
        }
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_ProductCategory>
    {
        public SalesLT_ProductCategoryConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_ProductCategoryConfiguration(string schema)
        {
            ToTable("ProductCategory", schema);
            HasKey(x => x.ProductCategoryId);

            Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ParentProductCategoryId).HasColumnName(@"ParentProductCategoryID").HasColumnType("int").IsOptional();
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.ParentProductCategory).WithMany(b => b.SalesLT_ProductCategories).HasForeignKey(c => c.ParentProductCategoryId).WillCascadeOnDelete(false); // FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID
        }
    }

    // ProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_ProductDescription>
    {
        public SalesLT_ProductDescriptionConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_ProductDescriptionConfiguration(string schema)
        {
            ToTable("ProductDescription", schema);
            HasKey(x => x.ProductDescriptionId);

            Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(400);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // ProductModel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductModelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_ProductModel>
    {
        public SalesLT_ProductModelConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_ProductModelConfiguration(string schema)
        {
            ToTable("ProductModel", schema);
            HasKey(x => x.ProductModelId);

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CatalogDescription).HasColumnName(@"CatalogDescription").HasColumnType("xml").IsOptional();
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();
        }
    }

    // ProductModelProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_ProductModelProductDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_ProductModelProductDescription>
    {
        public SalesLT_ProductModelProductDescriptionConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_ProductModelProductDescriptionConfiguration(string schema)
        {
            ToTable("ProductModelProductDescription", schema);
            HasKey(x => new { x.ProductModelId, x.ProductDescriptionId, x.Culture });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Culture).HasColumnName(@"Culture").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.SalesLT_ProductDescription).WithMany(b => b.SalesLT_ProductModelProductDescriptions).HasForeignKey(c => c.ProductDescriptionId).WillCascadeOnDelete(false); // FK_ProductModelProductDescription_ProductDescription_ProductDescriptionID
            HasRequired(a => a.SalesLT_ProductModel).WithMany(b => b.SalesLT_ProductModelProductDescriptions).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_ProductModelProductDescription_ProductModel_ProductModelID
        }
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_SalesOrderDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_SalesOrderDetail>
    {
        public SalesLT_SalesOrderDetailConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_SalesOrderDetailConfiguration(string schema)
        {
            ToTable("SalesOrderDetail", schema);
            HasKey(x => new { x.SalesOrderId, x.SalesOrderDetailId });

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SalesOrderDetailId).HasColumnName(@"SalesOrderDetailID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.OrderQty).HasColumnName(@"OrderQty").HasColumnType("smallint").IsRequired();
            Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired();
            Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.UnitPriceDiscount).HasColumnName(@"UnitPriceDiscount").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName(@"LineTotal").HasColumnType("numeric").IsRequired().HasPrecision(38,6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasRequired(a => a.SalesLT_Product).WithMany(b => b.SalesLT_SalesOrderDetails).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_SalesOrderDetail_Product_ProductID
            HasRequired(a => a.SalesLT_SalesOrderHeader).WithMany(b => b.SalesLT_SalesOrderDetails).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        }
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_SalesOrderHeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_SalesOrderHeader>
    {
        public SalesLT_SalesOrderHeaderConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_SalesOrderHeaderConfiguration(string schema)
        {
            ToTable("SalesOrderHeader", schema);
            HasKey(x => x.SalesOrderId);

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RevisionNumber).HasColumnName(@"RevisionNumber").HasColumnType("tinyint").IsRequired();
            Property(x => x.OrderDate).HasColumnName(@"OrderDate").HasColumnType("datetime").IsRequired();
            Property(x => x.DueDate).HasColumnName(@"DueDate").HasColumnType("datetime").IsRequired();
            Property(x => x.ShipDate).HasColumnName(@"ShipDate").HasColumnType("datetime").IsOptional();
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("tinyint").IsRequired();
            Property(x => x.OnlineOrderFlag).HasColumnName(@"OnlineOrderFlag").HasColumnType("bit").IsRequired();
            Property(x => x.SalesOrderNumber).HasColumnName(@"SalesOrderNumber").HasColumnType("nvarchar").IsRequired().HasMaxLength(25).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.PurchaseOrderNumber).HasColumnName(@"PurchaseOrderNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(25);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
            Property(x => x.CustomerId).HasColumnName(@"CustomerID").HasColumnType("int").IsRequired();
            Property(x => x.ShipToAddressId).HasColumnName(@"ShipToAddressID").HasColumnType("int").IsOptional();
            Property(x => x.BillToAddressId).HasColumnName(@"BillToAddressID").HasColumnType("int").IsOptional();
            Property(x => x.ShipMethod).HasColumnName(@"ShipMethod").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreditCardApprovalCode).HasColumnName(@"CreditCardApprovalCode").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(15);
            Property(x => x.SubTotal).HasColumnName(@"SubTotal").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName(@"TaxAmt").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName(@"Freight").HasColumnType("money").IsRequired().HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName(@"TotalDue").HasColumnType("money").IsRequired().HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired();

            // Foreign keys
            HasOptional(a => a.BillToAddress).WithMany(b => b.BillToAddress).HasForeignKey(c => c.BillToAddressId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Address_BillTo_AddressID
            HasOptional(a => a.ShipToAddress).WithMany(b => b.ShipToAddress).HasForeignKey(c => c.ShipToAddressId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Address_ShipTo_AddressID
            HasRequired(a => a.SalesLT_Customer).WithMany(b => b.SalesLT_SalesOrderHeaders).HasForeignKey(c => c.CustomerId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Customer_CustomerID
        }
    }

    // vGetAllCategories
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_VGetAllCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_VGetAllCategory>
    {
        public SalesLT_VGetAllCategoryConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_VGetAllCategoryConfiguration(string schema)
        {
            ToTable("vGetAllCategories", schema);
            HasKey(x => x.ParentProductCategoryName);

            Property(x => x.ParentProductCategoryName).HasColumnName(@"ParentProductCategoryName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductCategoryName).HasColumnName(@"ProductCategoryName").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").HasColumnType("int").IsOptional();
        }
    }

    // vProductAndDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_VProductAndDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_VProductAndDescription>
    {
        public SalesLT_VProductAndDescriptionConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_VProductAndDescriptionConfiguration(string schema)
        {
            ToTable("vProductAndDescription", schema);
            HasKey(x => new { x.ProductId, x.Name, x.ProductModel, x.Culture, x.Description });

            Property(x => x.ProductId).HasColumnName(@"ProductID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductModel).HasColumnName(@"ProductModel").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Culture).HasColumnName(@"Culture").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(400).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // vProductModelCatalogDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class SalesLT_VProductModelCatalogDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SalesLT_VProductModelCatalogDescription>
    {
        public SalesLT_VProductModelCatalogDescriptionConfiguration()
            : this("SalesLT")
        {
        }

        public SalesLT_VProductModelCatalogDescriptionConfiguration(string schema)
        {
            ToTable("vProductModelCatalogDescription", schema);
            HasKey(x => new { x.ProductModelId, x.Name, x.Rowguid, x.ModifiedDate });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Summary).HasColumnName(@"Summary").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Manufacturer).HasColumnName(@"Manufacturer").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Copyright).HasColumnName(@"Copyright").HasColumnType("nvarchar").IsOptional().HasMaxLength(30);
            Property(x => x.ProductUrl).HasColumnName(@"ProductURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.WarrantyPeriod).HasColumnName(@"WarrantyPeriod").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.WarrantyDescription).HasColumnName(@"WarrantyDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.NoOfYears).HasColumnName(@"NoOfYears").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.MaintenanceDescription).HasColumnName(@"MaintenanceDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Wheel).HasColumnName(@"Wheel").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Saddle).HasColumnName(@"Saddle").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Pedal).HasColumnName(@"Pedal").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.BikeFrame).HasColumnName(@"BikeFrame").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Crankset).HasColumnName(@"Crankset").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.PictureAngle).HasColumnName(@"PictureAngle").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.PictureSize).HasColumnName(@"PictureSize").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.ProductPhotoId).HasColumnName(@"ProductPhotoID").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Material).HasColumnName(@"Material").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Color).HasColumnName(@"Color").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.ProductLine).HasColumnName(@"ProductLine").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.Style).HasColumnName(@"Style").HasColumnType("nvarchar").IsOptional().HasMaxLength(256);
            Property(x => x.RiderExperience).HasColumnName(@"RiderExperience").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.33.0.0")]
    public class sys_DatabaseFirewallRuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<sys_DatabaseFirewallRule>
    {
        public sys_DatabaseFirewallRuleConfiguration()
            : this("sys")
        {
        }

        public sys_DatabaseFirewallRuleConfiguration(string schema)
        {
            ToTable("database_firewall_rules", schema);
            HasKey(x => new { x.Id, x.Name, x.StartIpAddress, x.EndIpAddress, x.CreateDate, x.ModifyDate });

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartIpAddress).HasColumnName(@"start_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIpAddress).HasColumnName(@"end_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"create_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifyDate).HasColumnName(@"modify_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    #endregion

    #region Stored procedure return models

    #endregion

}
// </auto-generated>

